/*
 * Copyright (c) 2014-2016, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

#include <dt-bindings/clock/tegra194-clock.h>
#include "dt-bindings/display/tegra-dc.h"
#include "dt-bindings/interrupt/tegra186-irq.h"
#include "dt-bindings/clock/tegra186-clock.h"
#include "dt-bindings/reset/tegra186-reset.h"
#include "dt-bindings/soc/tegra186-powergate.h"
#include <dt-bindings/interrupt-controller/irq.h>
#include <dt-bindings/gpio/tegra186-gpio.h>

/ {
	compatible = "nvidia,tegra186";
	interrupt-parent = <&intc>;
	#address-cells = <2>;
	#size-cells = <2>;

	reserved-memory {
		#address-cells = <2>;
		#size-cells = <2>;
		ranges;

		generic_reserved: generic_carveout {
			compatible = "nvidia,generic_carveout";
			size = <0 0>;
			alignment = <0 0x100000>;
			alloc-ranges = <0 0 0x1 0>;
			no-map;
			status = "disabled";
		};
	};

	tegra-carveouts {
		compatible = "nvidia,carveouts";
		memory-region = <&generic_reserved>;
	};

	timer {
		compatible = "arm,armv8-timer";
		interrupts = <1 11 0xf01
			      1 14 0xf01
			      1 11 0xf01
			      1 10 0xf01>;
		status = "disabled";
	};

	bpmp_clks: clock@0 {
		compatible = "nvidia,tegra-fake-clks";
		reg = <0x0>;
		#clock-cells = <1>;
		status = "okay";
	};

	rtc@c2a0000 {
		compatible = "nvidia,tegra18-rtc";
		reg = <0x0 0x0c2a0000 0x0 0x100>;
		interrupts = <0 10 0x04>;
		status = "disabled";
	};

	mc_sid@2c00000 {
		compatible = "nvidia,tegra-mc-sid";
 		reg = <0x0 0x02c00000 0x0 0x00010000>, /* MC_SID_BASE */
 		      <0x0 0x02c10000 0x0 0x00010000>; /* MC_BASE */
		status = "disabled";
	};

	/* HACK: Populate earlier than other device */
	smmu: iommu@12000000{
		compatible = "t19x,arm,mmu-500";
		reg = <0x0 0x11000000 0x0 0x01000000>, /* SMMU1 16MB */
		      <0x0 0x12000000 0x0 0x01000000>; /* SMMU0 16MB */

		#global-interrupts = <4>;
		interrupts = <0 170 4>,
			     <0 171 4>,
			     <0 232 4>,
			     <0 233 4>;

		status = "disabled";

		address-space-prop {
			common_as: common {
				iova-start = <0x0 0x80000000>;
				iova-size = <0x0 0x7FF00000>;
				alignment = <0xFFFFF>;
				num-pf-page = <0>;
				gap-page = <1>;
			};
			gpu_as: gpu {
				iova-start = <0x0 0x00100000>;
				iova-size = <0x3 0xFFEFFFFF>;
				alignment = <0xFFFFF>;
				num-pf-page = <0>;
				gap-page = <0>;
			};
			ape_as: ape {
				iova-start = <0x0 0x40000000>;
				iova-size = <0x0 0x20000000>;
				alignment = <0xFFFFF>;
				num-pf-page = <0>;
				gap-page = <1>;
			};
		};
	};


	intc: interrupt-controller@3881000 {
		compatible = "arm,cortex-a15-gic";
		#interrupt-cells = <3>;
		interrupt-controller;
		reg = <0x0 0x03881000 0x0 0x00001000
		       0x0 0x03882000 0x0 0x00002000>;
		status = "disabled";
	};

	chipid@100000 {
		compatible = "nvidia,tegra186-chipid";
		reg = <0x0 0x00100000 0x0 0x10000>;
		status = "disabled";
	};

	hsp_top: tegra-hsp@3c00000 {
		compatible = "nvidia,tegra186-hsp";
		reg = <0x0 0x03c00000 0x0 0x000a0000>;
		interrupts =	<0 176 0x4>,
				<0 120 0x4>,
				<0 121 0x4>,
				<0 122 0x4>,
				<0 123 0x4>,
				<0 124 0x4>,
				<0 125 0x4>,
				<0 126 0x4>,
				<0 127 0x4>;
		interrupt-names = "doorbell",
				"shared0", "shared1", "shared2", "shared3",
				"shared4", "shared5", "shared6", "shared7";
		status = "okay";
	};

	efuse@3820000 {
		compatible = "nvidia,tegra186-efuse";
		reg = <0x0 0x03820000 0x0 0x600>;
		clocks = <&bpmp_clks TEGRA194_CLK_FUSE>,
		         <&bpmp_clks TEGRA194_CLK_CLK_M>;
		clock-names = "fuse", "clk_m";
		status = "okay";
	};

	bpmp {
		compatible = "nvidia,tegra186-bpmp";
		#stream-id-cells = <1>;
		reg = <0x0 0x0d000000 0x0 0x00800000>,
		      <0x0 0x4004e000 0x0 0x00001000>,
		      <0x0 0x4004f000 0x0 0x00001000>;
		status = "okay";
	};

	uarta: serial@3100000 {
		compatible = "nvidia,tegra210-uart";
		#stream-id-cells = <1>;
		reg = <0x0 0x03100000 0x0 0x40>;
		reg-shift = <2>;
		interrupts = <0 TEGRA186_IRQ_UARTA 0x04>;
		nvidia,memory-clients = <14>;
		dma-names = "rx", "tx";
		clock-names = "serial", "parent";
		reset-names = "serial";
		status = "disabled";
	};

	host1x: host1x {
		compatible = "nvidia,tegra194-host1x", "simple-bus";
		reg = <0x0 0x13e10000 0x0 0x00010000
		       0x0 0x13e00000 0x0 0x00010000
		       0x0 0x13ec0000 0x0 0x00040000
		       0x0 0x60000000 0x0 0x00400000>;
		interrupts = <0 265 0x04>,
			     <0 263 0x04>;

		wakeup_capable;

		nvidia,vmid = <1>;

		#stream-id-cells = <9>;
		#address-cells = <2>;
		#size-cells = <2>;

		ranges;

		vic@15340000 {
			compatible = "nvidia,tegra194-vic";
			reg = <0x0 0x15340000 0x0 0x00040000>;

			#stream-id-cells = <1>;
		};

		nvjpg@15380000 {
			compatible = "nvidia,tegra194-nvjpg";
			reg = <0x0 0x15380000 0x0 0x00040000>;

			#stream-id-cells = <1>;
		};

		nvdec@15480000 {
			compatible = "nvidia,tegra194-nvdec";
			reg = <0x0 0x15480000 0x0 0x00040000>;

			#stream-id-cells = <1>;
		};

		nvenc@154c0000 {
			compatible = "nvidia,tegra194-nvenc";
			reg = <0x0 0x154c0000 0x0 0x00040000>;

			#stream-id-cells = <1>;
		};

		nvdla0@15880000 {
			compatible = "nvidia,tegra194-nvdla";
			reg = <0x0 0x15880000 0x0 0x00040000>;
			interrupts = <0 236 0x04>;

			clocks = <&bpmp_clks TEGRA194_CLK_DLA0_CORE>,
				 <&bpmp_clks TEGRA194_CLK_DLA0_FALCON>;
			clock-names = "nvdla0", "nvdla0_flcn";

			#stream-id-cells = <1>;
		};

		nvdla1@158c0000 {
			compatible = "nvidia,tegra194-nvdla";
			reg = <0x0 0x158c0000 0x0 0x00040000>;
			interrupts = <0 237 0x04>;

			clocks = <&bpmp_clks TEGRA194_CLK_DLA1_CORE>,
				 <&bpmp_clks TEGRA194_CLK_DLA1_FALCON>;
			clock-names = "nvdla1", "nvdla1_flcn";

			#stream-id-cells = <1>;
		};

		nvdisplay@15200000 {
			compatible = "nvidia,tegra186-dc";
			reg = <0x0 0x15200000 0x0 0x10000>;
			interrupts = <0 153 4>;

			#stream-id-cells = <0x1>;

			clock-names = "clk32k_in", "nvdisplay_disp",
				      "nvdisplayhub", "nvdisplay_p0",
				      "pllp_display", "plld2", "plld3",
				      "pll_d", "pll_d_out1", "emc", "emc_latency";
			clocks = <&clk32k_in>,
				 <&tegra_car TEGRA186_CLK_NVDISPLAY_DISP>,
				 <&tegra_car TEGRA186_CLK_NVDISPLAYHUB>,
				 <&tegra_car TEGRA186_CLK_NVDISPLAY_P0>,
				 <&tegra_car TEGRA186_CLK_PLLP_OUT0>,
				 <&tegra_car TEGRA186_CLK_PLLD2>,
				 <&tegra_car TEGRA186_CLK_PLLD3>,
				 <&tegra_car TEGRA186_CLK_PLLD>,
				 <&tegra_car TEGRA186_CLK_PLLD_OUT1>,
				 <&tegra_car TEGRA186_CLK_EMC>,
				 <&tegra_car TEGRA186_CLK_CLK_M>;
			reset-names = "misc", "wgrp0", "wgrp1", "wgrp2",
				      "wgrp3", "wgrp4", "wgrp5", "head0";
			resets = <&tegra_car TEGRA186_RESET_NVDISPLAY0_MISC>,
				 <&tegra_car TEGRA186_RESET_NVDISPLAY0_WGRP0>,
				 <&tegra_car TEGRA186_RESET_NVDISPLAY0_WGRP1>,
				 <&tegra_car TEGRA186_RESET_NVDISPLAY0_WGRP2>,
				 <&tegra_car TEGRA186_RESET_NVDISPLAY0_WGRP3>,
				 <&tegra_car TEGRA186_RESET_NVDISPLAY0_WGRP4>,
				 <&tegra_car TEGRA186_RESET_NVDISPLAY0_WGRP5>,
				 <&tegra_car TEGRA186_RESET_NVDISPLAY0_HEAD0>;
		}; //nvdisplay@15200000

		sor {
			compatible = "nvidia,tegra186-sor";
			reg = <0x0 0x15540000 0x0 0x40000>;

			nvidia,xbar-ctrl = <0x2 0x1 0x0 0x3 0x4>;

			clocks = <&clk32k_in>,
				 <&tegra_car TEGRA186_CLK_SOR0>,
				 <&tegra_car TEGRA186_CLK_SOR_SAFE>,
				 <&tegra_car TEGRA186_CLK_SOR0_PAD_CLKOUT>,
				 <&tegra_car TEGRA186_CLK_SOR0_OUT>,
				 <&tegra_car TEGRA186_CLK_PLLP_OUT0>,
				 <&tegra_car TEGRA186_CLK_MAUD>,
				 <&tegra_car TEGRA186_CLK_HDA>,
				 <&tegra_car TEGRA186_CLK_HDA2CODEC_2X>,
				 <&tegra_car TEGRA186_CLK_HDA2HDMICODEC>;
			clock-names = "clk32k_in", "sor0", "sor_safe",
				      "sor0_pad_clkout", "sor0_out",
				      "pllp_out0", "maud", "hda",
				      "hda2codec_2x", "hda2hdmi";
			resets = <&tegra_car TEGRA186_RESET_SOR0>,
				 <&tegra_car TEGRA186_RESET_HDA>,
				 <&tegra_car TEGRA186_RESET_HDA2CODEC_2X>,
				 <&tegra_car TEGRA186_RESET_HDA2HDMICODEC>;
			reset-names = "sor0","hda_rst", "hda2codec_2x_rst",
				"hda2hdmi_rst";
		}; //sor

		dpaux@155c0000 {
			compatible = "nvidia,tegra186-dpaux";
			reg = <0x0 0x155c0000 0x0 0x00040000>;
			interrupts = <0 159 4>;

			clocks = <&clk32k_in>,
				 <&tegra_car TEGRA186_CLK_DPAUX>,
				 <&tegra_car TEGRA186_CLK_PLLDP>;
			clock-names = "clk32k_in", "dpaux", "plldp";
			resets = <&tegra_car TEGRA186_RESET_DPAUX>;
			reset-names = "dpaux";
		}; //dpaux@155c0000

		pva0 {
			compatible = "nvidia,tegra194-pva";
			reg = <0x0 0x16000000 0x0 0x800000>;
			interrupts = <0 234 0x04>;

			clocks = <&bpmp_clks TEGRA194_CLK_PVA0_AXI>,
				 <&bpmp_clks TEGRA194_CLK_PVA0_VPS0>,
				 <&bpmp_clks TEGRA194_CLK_PVA0_VPS1>;
			clock-names = "pva0", "pva0_vps0", "pva0_vps1";

			#stream-id-cells = <1>;
		};

		pva1 {
			compatible = "nvidia,tegra194-pva";
			reg = <0x0 0x16800000 0x0 0x800000>;
			interrupts = <0 235 0x04>;

			clocks = <&bpmp_clks TEGRA194_CLK_PVA1_AXI>,
				 <&bpmp_clks TEGRA194_CLK_PVA1_VPS0>,
				 <&bpmp_clks TEGRA194_CLK_PVA1_VPS1>;
			clock-names = "pva1", "pva1_vps0", "pva1_vps1";

			#stream-id-cells = <1>;
		};

	}; // host1x

	tegra_car: clock@20000000 {
		compatible = "nvidia,tegra18x-car";
		reg = <0x0 0x20000000 0x0 0x02000000>;
		#clock-cells = <1>;
		#reset-cells = <1>;
	};

	clocks {
		compatible = "simple-bus";
		#address-cells = <1>;
		#size-cells = <0>;

		clk32k_in: clk32k_in@0 {
			compatible = "fixed-clock";
			reg = <0>;
			#clock-cells = <0>;
			clock-frequency = <32768>;
			status = "okay";
		};
	};

	gpcdma: dma@2600000 {
		compatible = "nvidia,tegra186-gpcdma";
		reg = <0x0 0x2600000 0x0 0x210000>;
		resets = <&tegra_car TEGRA186_RESET_GPCDMA>;
		reset-names = "gpcdma";
		interrupts = <0 75 0x04
			0 76 0x04
			0 77 0x04
			0 78 0x04
			0 79 0x04
			0 80 0x04
			0 81 0x04
			0 82 0x04
			0 83 0x04
			0 84 0x04
			0 85 0x04
			0 86 0x04
			0 87 0x04
			0 88 0x04
			0 89 0x04
			0 90 0x04
			0 91 0x04
			0 92 0x04
			0 93 0x04
			0 94 0x04
			0 95 0x04
			0 96 0x04
			0 97 0x04
			0 98 0x04
			0 99 0x04
			0 100 0x04
			0 101 0x04
			0 102 0x04
			0 103 0x04
			0 104 0x04
			0 105 0x04
			0 106 0x04
			0 107 0x04>;
		#dma-cells = <1>;
		#stream-id-cells = <1>;
		status = "disabled";
	};

	tegra_pinctrl: pinmux: pinmux@2430000 {
                compatible = "nvidia,tegra186-pinmux";
                reg = <0x0 0x2430000 0x0 0x15000
			0x0 0xc300000 0x0 0x4000>;
		#gpio-range-cells = <3>;
                status = "disabled";
        };

	tegra_main_gpio: gpio@2200000 {
		compatible = "nvidia,tegra186-gpio";
		reg-names = "security", "gpio";
		reg =
			<0x0 0x2200000 0x0 0x10000>,
			<0x0 0x2210000 0x0 0x10000>;
		interrupts =
			<0 47 IRQ_TYPE_LEVEL_HIGH>,
			<0 50 IRQ_TYPE_LEVEL_HIGH>,
			<0 53 IRQ_TYPE_LEVEL_HIGH>,
			<0 56 IRQ_TYPE_LEVEL_HIGH>,
			<0 59 IRQ_TYPE_LEVEL_HIGH>,
			<0 180 IRQ_TYPE_LEVEL_HIGH>;
		gpio-controller;
		#gpio-cells = <2>;
		interrupt-controller;
		#interrupt-cells = <2>;
		gpio-ranges =
			<&tegra_pinctrl  TEGRA_MAIN_GPIO_BASE(A) TEGRA_PIN_BASE(A) TEGRA_MAIN_GPIO_RANGE(A, R)>,
			<&tegra_pinctrl TEGRA_MAIN_GPIO_BASE(T) TEGRA_PIN_BASE(T) TEGRA_MAIN_GPIO_RANGE(T, T)>,
			<&tegra_pinctrl TEGRA_MAIN_GPIO_BASE(X) TEGRA_PIN_BASE(X) TEGRA_MAIN_GPIO_RANGE(X, Y)>,
			<&tegra_pinctrl TEGRA_MAIN_GPIO_BASE(BB) TEGRA_PIN_BASE(BB) TEGRA_MAIN_GPIO_RANGE(BB, DD) >;
		status = "disabled";
	};

	tegra_aon_gpio: gpio@c2f0000 {
		compatible = "nvidia,tegra186-gpio-aon";
		reg-names = "security", "gpio";
		reg = 	<0x0 0xc2f0000 0x0 0x1000>,
			<0x0 0xc2f1000 0x0 0x1000>;
		interrupts =
			<0 60 IRQ_TYPE_LEVEL_HIGH>;
		status = "disabled";
		gpio-controller;
		#gpio-cells = <2>;
		interrupt-controller;
		#interrupt-cells = <2>;
		gpio-ranges =
			<&tegra_pinctrl TEGRA_AON_GPIO_BASE(S) TEGRA_PIN_BASE(S) TEGRA_AON_GPIO_RANGE(S, S)>,
			<&tegra_pinctrl TEGRA_AON_GPIO_BASE(U) TEGRA_PIN_BASE(U) TEGRA_AON_GPIO_RANGE(U, W)>,
			<&tegra_pinctrl TEGRA_AON_GPIO_BASE(Z) TEGRA_PIN_BASE(Z) TEGRA_AON_GPIO_RANGE(Z, AA)>,
			<&tegra_pinctrl TEGRA_AON_GPIO_BASE(EE) TEGRA_PIN_BASE(EE) TEGRA_AON_GPIO_RANGE(EE, FF)>;
	};
};
